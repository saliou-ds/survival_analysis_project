surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + fac_study + strata(fac_histol), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) +  strata(fac_histol), data = train)
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
View(train)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_study) + strata(fac_in_subcohort) + strata(fac_histol), data = train)
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_study) + strata(fac_in_instit) + strata(fac_histol), data = train)
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_study) + strata(fac_in_instit), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_study) + strata(fac_in_instit), data = train)
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 0, 1)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == '3' , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 0, 1)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == '3' , 0, 1)
View(train)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
View(train)
View(train)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 0, 1)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 0, 1)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
surv_obj <- Surv(train$time, train$event) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = train)
# we would have 'group' instead of '1', if there were groups, with group being a variable
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_study) + strata(fac_histol), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  strata(fac_stage) + strata(fac_histol), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(time, event) ~  num_age, strata(fac_stage) + strata(fac_histol), data = train)
# Cox model
cox_model <- coxph(Surv(time, event) ~  num_age + strata(fac_stage) + strata(fac_histol), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ strata(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
library(randomForestSRC)
rsf_model <- rfsrc(Surv(time, event) ~ num_age + fac_histol + fac_stage, data = train)
print(rsf_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(rsf_model, newdata = test, type = "risk")$predicted
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
rsf_model <- rfsrc(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
rsf_model <- rfsrc(Surv(train$time, train$event) ~ tt(num_age) + fac_stage + fac_histol, data = train, tt = function(x, t, ...) x * log(t) )
rsf_model <- rfsrc(Surv(time, event) ~ log(num_age) + fac_histol + fac_stage, data = train)
print(rsf_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(rsf_model, newdata = test, type = "risk")$predicted
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 0, 1)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 0, 1)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
surv_obj <- Surv(train$time, train$event) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = train)
# we would have 'group' instead of '1', if there were groups, with group being a variable
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For in_subcohort
km_fit <- survfit(surv_obj ~ fac_in_subcohort, data = train) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For in_subcohort
km_fit <- survfit(surv_obj ~ fac_in_subcohort, data = train) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For instit
km_fit <- survfit(surv_obj ~ fac_instit, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For histol
km_fit <- survfit(surv_obj ~ fac_histol, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For stage
km_fit <- survfit(surv_obj ~ fac_stage, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For study
km_fit <- survfit(surv_obj ~ fac_study, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# Cox model
cox_model <- coxph(Surv(time, event) ~  num_age + strata(fac_stage) + strata(fac_histol), data = train)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol), data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) + fac_study, data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) + fac_in_subcohort, data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) + fac_in_subcohort + fac_study, data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) x * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
?pspline
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ pspline(num_age, 3) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) x * log(t) )
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ pspline(num_age, 5) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) x * log(t) )
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ pspline(num_age, 10) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) x * log(t) )
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
View(test)
View(train)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x^2) * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
library(glmnet)
install.packages("glmnet")
library(glmnet)
x <- model.matrix(Surv(time, event) ~ ., data = train)[, -1]
y <- Surv(train$time, train$event)
lasso_model <- cv.glmnet(x, y, family = "cox", alpha = 1)
ridge_model <- cv.glmnet(x, y, family = "cox", alpha = 0)
elastic_net_model <- cv.glmnet(x, y, family = "cox", alpha = 0.5)
# Evaluate the model on the test set
test$predicted_risk <- predict(elastic_net_model, newdata = test, type = "risk")
# Evaluate the model on the test set
test$predicted_risk <- predict(elastic_net_model, newdata = test, type = "risk")$coefficients
predict(elastic_net_model, newdata = test, type = "risk")
# Evaluate the model on the test set
test_matrix <- model.matrix(~ ., data = test)[, -1]
test$predicted_risk <- predict(elastic_net_model, newdata = test, type = "risk")
test$predicted_risk <- predict(elastic_net_model, newdata = test, type = "risk")$coefficients
test$predicted_risk <- predict(elastic_net_model, newdata = test_matrix, type = "link")
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")$coefficients
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
x <- model.matrix(Surv(time, event) ~ ., data = train)[, -1]
y <- Surv(train$time, train$event)
lasso_model <- cv.glmnet(x, y, family = "cox", alpha = 1)
ridge_model <- cv.glmnet(x, y, family = "cox", alpha = 0)
elastic_net_model <- cv.glmnet(x, y, family = "cox", alpha = 0.5)
# Evaluate the model on the test set
test_matrix <- model.matrix(~ ., data = test)[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
test_matrix
colnames(test_matrix) <- colnames(x)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test)[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
View(test)
View(test)
View(train)
View(train)
test_matrix <- model.matrix(~ ., data = test)[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
cv.glmnet(x, y, family = "cox", alpha = 0.5)
predict(elastic_net_model, newx = test_matrix, type = "link")
View(test_matrix)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
rlang::last_trace()
colnames(test_matrix) <- colnames(x)
View(x)
View(test_matrix)
test_matrix <- model.matrix(~ ., data = test %>% select(-event) )[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
colnames(test_matrix) <- colnames(x)
View(train)
View(test)
View(train)
View(x)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
x <- model.matrix(Surv(time, event) ~ ., data = train)[, -1]
y <- Surv(train$time, train$event)
lasso_model <- cv.glmnet(x, y, family = "cox", alpha = 1)
ridge_model <- cv.glmnet(x, y, family = "cox", alpha = 0)
elastic_net_model <- cv.glmnet(x, y, family = "cox", alpha = 0.5)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(lasso_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
x <- model.matrix(Surv(time, event) ~ ., data = train)[, -1]
y <- Surv(train$time, train$event)
lasso_model <- cv.glmnet(x, y, family = "cox", alpha = 1)
ridge_model <- cv.glmnet(x, y, family = "cox", alpha = 0)
elastic_net_model <- cv.glmnet(x, y, family = "cox", alpha = 0.5)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(lasso_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(ridge_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Evaluate the model on the test set
test <- test %>% select(-predicted_risk)
test_matrix <- model.matrix(~ ., data = test %>% select(-event, -time) )[, -1]
test$predicted_risk <- predict(elastic_net_model, newx = test_matrix, type = "link")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
lasso_model
View(df)
packageVersion("glmnet")
