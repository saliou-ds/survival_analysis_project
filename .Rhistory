# Evaluate the model on the test set
test_pca <- predict(res.pca, newdata = test[, significant_predictors])
test_pca <- as.data.frame(test_pca$coord)
test_pca <- cbind(test, test_pca)
test_pca$predicted_risk <- predict(cox_model_pca, newdata = test_pca, type = "risk")
surv_obj_test <- Surv(test_pca$fyear, test_pca$status_label)
concordance_test_pca <- concordance(surv_obj_test ~ test_pca$predicted_risk)
print(concordance_test_pca)
# Read the CSV files
train <- read.csv("dataset_paper/financial_train.csv")
validation <- read.csv("dataset_paper/financial_validation.csv")
test <- read.csv("dataset_paper/financial_test.csv")
# Recode status_label using ifelse
train <- train %>% mutate(status_label = ifelse(status_label == "alive", 0, 1))
validation <- validation %>% mutate(status_label = ifelse(status_label == "alive", 0, 1))
test <- test %>% mutate(status_label = ifelse(status_label == "alive", 0, 1))
# Apply log(abs(x) + 1) transformation to all variables from columns 4 to the last column
train[, 4:ncol(train)] <- log(abs(train[, 4:ncol(train)]) + 1)
validation[, 4:ncol(validation)] <- log(abs(validation[, 4:ncol(validation)]) + 1)
test[, 4:ncol(test)] <- log(abs(test[, 4:ncol(test)]) + 1)
train <- rbind(train, validation)
# Fit the Cox model
cox_model <- coxph(Surv(train$fyear, train$status_label) ~ ., data = train[, low_cor_significant_predictors])
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$fyear, test$status_label)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
df <- read.csv("dataset/Financial Distress.csv")
View(df)
View(df)
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Training Data)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
ggsurvplot(km_fit,
data = df)
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(train)]
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(train[, significant_predictors])
cor_matrix <- cor(df[, significant_predictors])
View(cor_matrix)
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
high_cor_pairs
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
final_predictors <- rownames(coef_table)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
#X1_net_income alone was significant but with X3_net_income  it's not so
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
final_predictors
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
vif(cox_model)
vif(df[, significant_predictors])
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
View(cor_matrix)
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
# Standardize Predictors
df[, low_cor_significant_predictors] <- scale(df[, low_cor_significant_predictors])
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# keep all significant_predictors
res.pca <- PCA(df[, low_cor_significant_predictors], graph = FALSE)
explor(res.pca)
# Extract the principal components
pca_components <- as.data.frame(res.pca$ind$coord)
# Add the principal components to the combined training set
df_pca <- cbind(df, pca_components)
# Fit the Cox model using the principal components
cox_model_pca <- coxph(Surv(Time, Financial.Distress) ~ ., data = df_pca[, c("Time", "Financial.Distress", colnames(pca_components))])
summary(cox_model_pca)
# Check the proportional hazards assumption
ph_df_pca <- cox.zph(cox_model_pca)
print(ph_df_pca)
plot(ph_test_pca)
plot(ph_df_pca)
explor(res.pca)
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
cox.zph(cox_model)
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
# Standardize Predictors
df[, low_cor_significant_predictors] <- scale(df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ . - x18 - x20 - x54 - x55 - x56 - x67 - x69 - x73 + strata(x18, x20, x54, x55, x56, x67, x69, x73), data = df[, low_cor_significant_predictors])
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Standardize Predictors
df[, low_cor_significant_predictors] <- scale(df[, low_cor_significant_predictors])
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
cox_summary <- summary(cox_model)
final_predictors <- rownames(cox_summary$coefficients)[cox_summary$coefficients[, "Pr(>|z|)"] < 0.05]
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, final_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, 0)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Standardize Predictors
df[, low_cor_significant_predictors] <- scale(df[, low_cor_significant_predictors])
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
class(ph_test)
ph_test_results <- data.frame(
predictor = rownames(ph_test$table),
p_value = ph_test$table[, "p"]
)
# Filter predictors with p-value > 0.05
final_predictors <- ph_test_results$predictor[ph_test_results$p_value > 0.05]
# Remove the 'GLOBAL' row if present
final_predictors <- final_predictors[final_predictors != "GLOBAL"]
# Print the final predictors
print(final_predictors)
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, final_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Load and install libraries
#install.packages("survminer")
#install.packages("FactoMineR")
#install.packages("explor")
library(FactoMineR)
library(explor)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/Financial Distress.csv")
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1)
#recode
df$Financial.Distress <- ifelse(df$Financial.Distress < -0.5, 1, df$Financial.Distress)
# Fit the Kaplan-Meier survival curve on the training set
surv_obj <- Surv(df$Time, df$Financial.Distress) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = df) # creates survival curves
ggsurvplot(km_fit,
data = df,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
break.time.by = 2, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(df)[4:ncol(df)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(Time, Financial.Distress) ~", x)), data = df)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results[1:5])
significant_predictors <- predictor_vars[sapply(univariate_results, function(x) x$coefficients[,"Pr(>|z|)"] < 0.05)] #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(df[, significant_predictors])
View(cor_matrix)
high_cor_pairs <- abs(cor_matrix) > 0.7
diag(high_cor_pairs) <- FALSE
high_cor_pairs <- which(high_cor_pairs, arr.ind = TRUE) # each row represents the emplacement (row and column) of a pair where cor_matrice > 0.7
low_cor_significant_predictors <- significant_predictors[- unique(high_cor_pairs[, "col"]) ] # I remove one predictor from every pair with high correlation
# Standardize Predictors
df[, low_cor_significant_predictors] <- scale(df[, low_cor_significant_predictors])
# Cox model
cox_model <- coxph(Surv(df$Time, df$Financial.Distress) ~ ., data = df[, low_cor_significant_predictors])
# Summarize the model
summary(cox_model)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
#X1_net_income alone was significant but with X3_net_income  it's not so
cox_summary <- summary(cox_model)
