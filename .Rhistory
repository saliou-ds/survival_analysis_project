risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For in_subcohort
km_fit <- survfit(surv_obj ~ fac_in_subcohort, data = train) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 0.5, 0)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 0.5, 0)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
surv_obj <- Surv(train$time, train$event) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = train)
# For in_subcohort
km_fit <- survfit(surv_obj ~ fac_in_subcohort, data = train) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
View(df)
View(df)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 1, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 1, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ num_age + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 2, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 2, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 5, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 5, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
#recode
train <- train %>% select(-num_stage)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 3, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 4, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 4, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 4, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 3, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# For study
km_fit <- survfit(surv_obj ~ fac_study, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test <- test %>% select(-num_stage)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 3, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + tt(num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
View(train)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + tt(num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + tt(num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 3, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + tt(num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + tt(num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age) + num_stage + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
View(train)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age + num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Load and install libraries
#install.packages("survminer")
#install.packages("caret")
#install.packages("glmnet")
library(glmnet)
library(caret)
library(survival)
library(survminer)
library(dplyr)
library(car)
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train <- train %>% select(-num_stage)
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
df <- read.csv("dataset/tumor_dataset.csv")
set.seed(221)  # For reproducibility
trainIndex <- createDataPartition(df$event, p = 0.8, list = FALSE)
# Split the data
train <- df[trainIndex, ]
test <- df[-trainIndex, ]
#recode
train$fac_in_subcohort <- ifelse(train$fac_in_subcohort == 'True' , 3, 0.5)
train$fac_instit <- ifelse(train$fac_instit == 'Favourable' , 0, 1)
train$fac_histol <- ifelse(train$fac_histol == 'Favourable' , 0, 1)
train$fac_study <- ifelse(train$fac_study == 3 , 0, 1)
test$fac_in_subcohort <- ifelse(test$fac_in_subcohort == 'True' , 3, 0.5)
test$fac_instit <- ifelse(test$fac_instit == 'Favourable' , 0, 1)
test$fac_histol <- ifelse(test$fac_histol == 'Favourable' , 0, 1)
test$fac_study <- ifelse(test$fac_study == 3 , 0, 1)
surv_obj <- Surv(train$time, train$event) # creates a survival object using time and event indicator, default use Kaplan-Meier
km_fit <- survfit(surv_obj ~ 1, data = train)
# we would have 'group' instead of '1', if there were groups, with group being a variable
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
#pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve (Data Frame)",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For in_subcohort
km_fit <- survfit(surv_obj ~ fac_in_subcohort, data = train) # creates survival curves
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve for in_subcohort",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For instit
km_fit <- survfit(surv_obj ~ fac_instit, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve for instit",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For histol
km_fit <- survfit(surv_obj ~ fac_histol, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve for histol",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For stage
km_fit <- survfit(surv_obj ~ fac_stage, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve for stage",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
# For study
km_fit <- survfit(surv_obj ~ fac_study, data = train)
ggsurvplot(km_fit,
data = train,
conf.int = TRUE,
risk.table = TRUE, # number of subjects at risk at different time points
pval = TRUE,    # when multiple groups automatically performs a log-rank test and displays the p-value, which tests the null hypothesis that there is no difference between the survival curves
ggtheme = theme_survminer(),
title = "Kaplan-Meier Survival Curve for study",
risk.table.height = 0.35,  # Adjust the height of the risk table
#xlim = c(2000, 2014),
xlab = "Time (months)",
break.time.by = 1000, # Set the x-axis limits
break.y.by = 0.25)  # Set the y-axis steps
predictor_vars <- colnames(train)[4:ncol(train)]
univariate_results <- lapply(predictor_vars, function(x) { # univariate Cox regression for each predictor to identify strong predictors     #lapply always give list
summary(coxph(as.formula(paste("Surv(time, event) ~", x)), data = train)) # as.formula converts a string into a formula object. coxph need a a formula object
})
print(univariate_results)
View(univariate_results)
summary(univariate_results)
univariate_results[1,]$coefficients
univariate_results[1,]
univariate_results[1]
univariate_results[1]$coefficients
as.data.frame(univariate_results[1])
summary(univariate_results[1])
summary(univariate_results[1])$coefficients
print(univariate_results)
View(cor_matrix)
significant_predictors <- c("num_age", "fac_stage", "fac_instit","fac_histol") #  p-value <0.05 from the Wald test  # sapply Simplifies the result to a vector or matrix if possible.
cor_matrix <- cor(train[, significant_predictors])
View(cor_matrix)
View(cor_matrix)
# Open a PNG device to export my matrix
png("Table1_correlation_matrix.png", width = 800, height = 800)
image(1:nrow(cor_matrix), 1:ncol(cor_matrix), t(cor_matrix), col = heat.colors(9), axes = FALSE)
axis(1, at = 1:nrow(cor_matrix), labels = 1:nrow(cor_matrix))
axis(2, at = 1:ncol(cor_matrix), labels = 1:ncol(cor_matrix))
# Close the PNG device
dev.off()
# Export correlation matrix as csv
write.csv(cor_matrix, "Table1_correlation_matrix.csv")
# fac_histol and fac_instit are correlated. We are going to keep the better predictor.
summary(coxph(Surv(time, event) ~ fac_instit, data = train))
summary(coxph(Surv(time, event) ~ fac_histol, data = train))
low_cor_significant_predictors <- significant_predictors[significant_predictors != "fac_instit"] # I remove one predictor from every pair with high correlation
print(low_cor_significant_predictors)
low_cor_significant_predictors <- c("num_age" ,"fac_stage"  , "fac_histol")
# Cox model
cox_model <- coxph(Surv(time, event) ~  num_age + strata(fac_stage) + strata(fac_histol), data = train)
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model)
print(ph_test)
plot(ph_test)
# Cox model
cox_model <- coxph(Surv(train$time, train$event) ~ tt(num_age) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) )
# Summarize the model
summary(cox_model)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age + num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Evaluate the model on the test set
test$predicted_risk <- predict(cox_model_weighted, newdata = test, type = "risk")
surv_obj_test <- Surv(test$time, test$event)
concordance_test <- concordance(surv_obj_test ~ test$predicted_risk)
print(concordance_test)
# Cox model
cox_model_weighted <- coxph(Surv(train$time, train$event) ~ tt(num_age + num_stage) + strata(fac_stage) + strata(fac_histol) , data = train, tt = function(x, t, ...) (-x) * log(t) , weights = fac_in_subcohort)
# Summarize the model
summary(cox_model_weighted)
# Write the output to a text file
writeLines(concordance_test, "Table2_concordance_test.txt")
print(concordance_test)
# Check the proportional hazards assumption
ph_test <- cox.zph(cox_model_weighted)
